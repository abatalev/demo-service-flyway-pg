<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.4</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.abatalev.demo</groupId>
	<artifactId>things-service</artifactId>
	<version>0.0.1</version>
	<name>things-service</name>
	<description>Demo project for Spring Boot</description>
	<url />
	<licenses>
		<license />
	</licenses>
	<developers>
		<developer />
	</developers>
	<scm>
		<connection />
		<developerConnection />
		<tag />
		<url />
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.testcontainers</groupId>
				<artifactId>testcontainers-bom</artifactId>
				<version>1.20.6</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>io.opentelemetry.instrumentation</groupId>
				<artifactId>opentelemetry-instrumentation-bom</artifactId>
				<version>2.10.0</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-database-postgresql</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>testcontainers</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>postgresql</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>io.opentelemetry.instrumentation</groupId>
			<artifactId>opentelemetry-spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>io.opentelemetry</groupId>
			<artifactId>opentelemetry-api</artifactId>
		</dependency>
		<dependency>
			<groupId>io.opentelemetry</groupId>
			<artifactId>opentelemetry-sdk</artifactId>
		</dependency>
		<dependency>
			<groupId>io.opentelemetry</groupId>
			<artifactId>opentelemetry-exporter-logging</artifactId>
		</dependency>
		<dependency>
			<groupId>io.opentelemetry</groupId>
			<artifactId>opentelemetry-exporter-otlp</artifactId>
		</dependency>
		<!-- <dependency>
            <groupId>io.opentelemetry.semconv</groupId>
            <artifactId>opentelemetry-semconv-incubating</artifactId>
            <version>1.30.0-alpha</version>
        </dependency> -->
		<dependency>
			<groupId>io.opentelemetry.semconv</groupId>
			<artifactId>opentelemetry-semconv</artifactId>
			<version>1.25.0-alpha</version>
		</dependency>
		<dependency>
			<groupId>io.opentelemetry.instrumentation</groupId>
			<artifactId>opentelemetry-spring-web-3.1</artifactId>
			<version>2.10.0-alpha</version>
		</dependency>

		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-otlp</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-tracing</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-tracing-bridge-otel</artifactId>
		</dependency>

		<dependency>
			<groupId>io.qameta.allure</groupId>
			<artifactId>allure-junit5</artifactId>
			<version>2.29.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<finalName>app</finalName>
		<plugins>
			<plugin>
				<groupId>io.qameta.allure</groupId>
				<artifactId>allure-maven</artifactId>
				<version>2.12.0</version>
				<configuration>
					<reportVersion>2.30.0</reportVersion>
					<reportDirectory>${project.build.directory}/site/allure-report/</reportDirectory>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>report</goal>
						</goals>
						<phase>prepare-package</phase>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.5.3</version>
				<configuration>
					<testFailureIgnore>false</testFailureIgnore>
					<systemProperties>
						<property>
							<name>junit.jupiter.extensions.autodetection.enabled</name>
							<value>true</value>
						</property>
						<property>
							<name>allure.results.directory</name>
							<value>${project.build.directory}/allure-results</value>
						</property>
					</systemProperties>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.diffplug.spotless</groupId>
				<artifactId>spotless-maven-plugin</artifactId>
				<version>2.44.3</version>
				<configuration>

					<sortPom>
						<encoding>UTF-8</encoding> <!-- The encoding of the pom files -->
						<lineSeparator>${line.separator}</lineSeparator> <!-- line separator to use -->
						<expandEmptyElements>true</expandEmptyElements> <!-- Should empty elements be
						expanded -->
						<spaceBeforeCloseEmptyElement>false</spaceBeforeCloseEmptyElement> <!--
						Should a space be added inside self-closing elements -->

						<keepBlankLines>true</keepBlankLines> <!-- Keep empty lines -->

						<endWithNewline>true</endWithNewline> <!-- Whether sorted pom ends with a
						newline -->

						<nrOfIndentSpace>2</nrOfIndentSpace> <!-- Indentation -->

						<indentBlankLines>false</indentBlankLines> <!-- Should empty lines be
						indented -->

						<indentSchemaLocation>false</indentSchemaLocation> <!-- Should schema
						locations be indented -->

						<indentAttribute></indentAttribute> <!-- Should the xml attributes be
						indented -->

						<predefinedSortOrder>recommended_2008_06</predefinedSortOrder> <!-- Sort
						order of elements:
						https://github.com/Ekryd/sortpom/wiki/PredefinedSortOrderProfiles -->

						<sortOrderFile></sortOrderFile> <!-- Custom sort order of elements:
						https://raw.githubusercontent.com/Ekryd/sortpom/master/sorter/src/main/resources/custom_1.xml -->

						<sortDependencies></sortDependencies> <!-- Sort dependencies:
						https://github.com/Ekryd/sortpom/wiki/SortDependencies -->

						<sortDependencyManagement></sortDependencyManagement> <!-- Sort dependency
						management: https://github.com/Ekryd/sortpom/wiki/SortDependencies -->

						<sortDependencyExclusions></sortDependencyExclusions> <!-- Sort dependency
						exclusions: https://github.com/Ekryd/sortpom/wiki/SortDependencies -->

						<sortPlugins></sortPlugins> <!-- Sort plugins:
						https://github.com/Ekryd/sortpom/wiki/SortPlugins -->

						<sortProperties>false</sortProperties> <!-- Sort properties -->

						<sortModules>false</sortModules> <!-- Sort modules -->

						<sortExecutions>false</sortExecutions> <!-- Sort plugin executions -->
					</sortPom>
					<!-- optional: limit format enforcement to just the files changed by this
					feature branch -->
					<!-- <ratchetFrom>origin/main</ratchetFrom> -->
					<formats>
						<!-- you can define as many formats as you want, each is independent -->
						<format>
							<!-- define the files to apply to -->
							<includes>
								<include>.gitattributes</include>
								<include>.gitignore</include>
							</includes>
							<!-- define the steps to apply to those files -->
							<trimTrailingWhitespace />
							<endWithNewline />
							<indent>
								<tabs>true</tabs>
								<spacesPerTab>4</spacesPerTab>
							</indent>
						</format>
					</formats>
					<!-- define a language-specific format -->
					<java>
						<!-- no need to specify files, inferred automatically, but you can if you
						want -->

						<!-- apply a specific flavor of google-java-format and reflow long strings -->
						<palantirJavaFormat>
							<version>2.39.0</version>                     <!-- optional -->
							<style>PALANTIR</style>                       <!-- or AOSP/GOOGLE (optional) -->
							<formatJavadoc>false</formatJavadoc>          <!-- defaults to false (optional,
							requires at least Palantir 2.39.0) -->
						</palantirJavaFormat>

						<!-- make sure every file has the following copyright header.
        optionally, Spotless can set copyright years by digging
        through git history (see "license" section below) -->
						<!-- <licenseHeader>
         <content>/* (C)$YEAR */</content>  
      </licenseHeader> -->
					</java>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
						</goals>
						<phase>compile</phase>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.8.1</version>
				<executions>
					<execution>
						<id>unpack</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>com.abatalev.demo</groupId>
									<artifactId>things-initdb</artifactId>
									<version>0.0.1</version>
									<classifier>sql</classifier>
									<type>jar</type>
									<overWrite>false</overWrite>
									<outputDirectory>${project.build.directory}/db</outputDirectory>
									<includes>**/*.sql</includes>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.12</version>
				<executions>
					<execution>
						<id>add-test-resource</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>add-test-resource</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>${project.basedir}/target/db/</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.github.spotbugs</groupId>
				<artifactId>spotbugs-maven-plugin</artifactId>
				<version>4.9.3.0</version>
				<configuration>
					<xmlOutput>true</xmlOutput>
					<xmlOutputDirectory>target/site</xmlOutputDirectory>
					<excludeFilterFile>spotbugs-exclude.xml</excludeFilterFile>
					<plugins>
						<plugin>
							<groupId>com.h3xstream.findsecbugs</groupId>
							<artifactId>findsecbugs-plugin</artifactId>
							<version>1.12.0</version>
						</plugin>
					</plugins>
				</configuration>
				<executions>
					<execution>
						<phase>prepare-package</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.12</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/site/jacoco-report</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>jacoco-check</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>PACKAGE</element>
									<limits>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.30</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.pitest</groupId>
				<artifactId>pitest-maven</artifactId>
				<version>1.19.0</version>
				<configuration>
					<reportsDirectory>${project.build.directory}/site/pit-report</reportsDirectory>
					<avoidCallsTo>
						<avoidCallsTo>java.util.logging</avoidCallsTo>
						<avoidCallsTo>org.apache.log4j</avoidCallsTo>
						<avoidCallsTo>org.slf4j</avoidCallsTo>
						<avoidCallsTo>org.apache.commons.logging</avoidCallsTo>
					</avoidCallsTo>
					<mutators>
						<mutator>DEFAULTS</mutator>
						<mutator>EXPERIMENTAL_MEMBER_VARIABLE</mutator>
					</mutators>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.pitest</groupId>
						<artifactId>pitest-junit5-plugin</artifactId>
						<version>1.2.2</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
</project>